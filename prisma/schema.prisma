generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Pokemon {
  id                     Int             @id
  name                   String
  profileImage           String          @db.Text
  flavorTexts            String          @db.Text
  typesJson              String          @db.Text
  bot                    Boolean         @default(false)
  user                   User?
  posts                  Post[]
  comments               Comment[]
  likes                  Like[]
  followers              Pokemon[]       @relation("Followers")
  follows                Pokemon[]       @relation("Followers")
  friends                Pokemon[]       @relation("Friends")
  friendOf               Pokemon[]       @relation("Friends")
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
}

model Post {
  id        String    @id @default(uuid())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  posterId  Int
  itemId    Int       @default(-1)
  positive  Boolean   @default(false)
  poster    Pokemon   @relation(fields: [posterId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  item      Item?     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([createdAt, id])
  @@index([posterId])
  @@index([itemId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  posterId  Int
  postId    String
  poster    Pokemon  @relation(fields: [posterId], references: [id])
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([posterId])
  @@index([postId])
}

model Like {
  createdAt DateTime @default(now())
  creatorId Int
  postId    String
  Pokemon   Pokemon  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([creatorId, postId])
  @@index([creatorId])
  @@index([postId])
}

model FriendRequest {
  senderId   Int
  receiverId Int
  sender     Pokemon @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   Pokemon @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@id([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Item {
  id       Int           @id
  name     String
  effect   String        @db.Text
  sprite   String        @db.Text
  itemType Item_itemType
  reviews  Post[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  pokemonId     Int?      @unique
  profileImage  String?
  accounts      Account[]
  sessions      Session[]
  pokemon       Pokemon?  @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Followers {
  A Int
  B Int

  @@unique([A, B], map: "_Followers_AB_unique")
  @@index([B], map: "_Followers_B_index")
  @@map("_Followers")
}

model Friends {
  A Int
  B Int

  @@unique([A, B], map: "_Friends_AB_unique")
  @@index([B], map: "_Friends_B_index")
  @@map("_Friends")
}

enum Item_itemType {
  Berries
  HeldItems
  Vitamins
  SpecialBalls
  Healing
  StatusCures
  Training
  StandardBalls
  BadHeldItems
  Revival
  Choice
}
